# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-05-02 12:34:00

defmodule :chumak_z85 do
  defmacrop erlconst_SPECIAL_CHARS() do
    quote do
      '.-:+=^!/*?&<>()[]{}@%$#'
    end
  end

  @spec encode(binary()) :: char_list()

  def encode(binary) when is_binary(binary) do
    case(rem(:erlang.size(binary), 4)) do
      0 ->
        :lists.flatten(
          for(<<x::size(32)-big-unsigned-integer <- binary>>, into: [], do: encode_octets(x))
        )
    end
  end

  @spec decode(char_list()) :: binary()

  def decode(string) when is_list(string) do
    case(rem(length(string), 5)) do
      0 ->
        for(x <- to_nrs(string, []), into: <<>>, do: <<x::size(32)-big-unsigned-integer>>)
    end
  end

  defp to_nrs([], acc) do
    :lists.reverse(acc)
  end

  defp to_nrs([c1, c2, c3, c4, c5 | t], acc) do
    number =
      decode_char(c5) + decode_char(c4) * 85 + decode_char(c3) * 85 * 85 +
        decode_char(c2) * 85 * 85 * 85 + decode_char(c1) * 85 * 85 * 85 * 85

    to_nrs(t, [number | acc])
  end

  defp decode_char(c) when ?0 <= c and c <= ?9 do
    c - ?0
  end

  defp decode_char(c) when ?a <= c and c <= ?z do
    c - ?a + 10
  end

  defp decode_char(c) when ?A <= c and c <= ?Z do
    c - ?A + 36
  end

  defp decode_char(c) do
    find_pos(c, erlconst_SPECIAL_CHARS(), 62)
  end

  defp find_pos(c, [c | _], n) do
    n
  end

  defp find_pos(c, [_ | t], n) do
    find_pos(c, t, n + 1)
  end

  defp encode_octets(int) do
    c1 = rem(int, 85)
    int2 = div(int, 85)
    c2 = rem(int2, 85)
    int3 = div(int2, 85)
    c3 = rem(int3, 85)
    int4 = div(int3, 85)
    c4 = rem(int4, 85)
    c5 = div(int4, 85)
    [encode_85(c5), encode_85(c4), encode_85(c3), encode_85(c2), encode_85(c1)]
  end

  defp encode_85(x) when x <= 9 do
    x + 48
  end

  defp encode_85(x) when x <= 35 do
    x + 87
  end

  defp encode_85(x) when x <= 61 do
    x + 29
  end

  defp encode_85(x) when x >= 61 do
    :lists.nth(x - 61, erlconst_SPECIAL_CHARS())
  end
end
