# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-05-02 12:34:00

defmodule :chumak_xsub do
  defmacrop erlconst_SUB() do
    quote do
      :chumak_sub
    end
  end

  def init(var_identity) do
    erlconst_SUB().init(var_identity, [:xsub])
  end

  def identity(state) do
    erlconst_SUB().identity(state)
  end

  def valid_peer_type(socketType) do
    erlconst_SUB().valid_peer_type(socketType)
  end

  def peer_flags(state) do
    erlconst_SUB().peer_flags(state)
  end

  def accept_peer(state, peerPid) do
    erlconst_SUB().accept_peer(state, peerPid)
  end

  def peer_ready(state, peerPid, var_identity) do
    erlconst_SUB().peer_ready(state, peerPid, var_identity)
  end

  def send(state, data, from) do
    erlconst_SUB().send(state, data, from)
  end

  def recv(state, from) do
    erlconst_SUB().recv(state, from)
  end

  def send_multipart(state, data, from) do
    erlconst_SUB().send_multipart(state, data, from)
  end

  def recv_multipart(state, from) do
    erlconst_SUB().recv_multipart(state, from)
  end

  def peer_recv_message(state, message, from) do
    erlconst_SUB().peer_recv_message(state, message, from)
  end

  def queue_ready(state, var_identity, from) do
    erlconst_SUB().queue_ready(state, var_identity, from)
  end

  def peer_disconected(state, peerPid) do
    erlconst_SUB().peer_disconected(state, peerPid)
  end

  def cancel(state, topic) do
    erlconst_SUB().cancel(state, topic)
  end

  def peer_reconnected(state, peerPid) do
    erlconst_SUB().peer_reconnected(state, peerPid)
  end

  def subscribe(state, topic) do
    erlconst_SUB().subscribe(state, topic)
  end
end
