# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-05-02 12:33:59

defmodule :chumak_subscriptions do
  @typep subscriptions() :: %{pid: list(binary())}

  @spec new() :: subscriptions()

  def new() do
    %{}
  end

  @spec put(subscriptions(), pid(), binary()) :: subscriptions()

  def put(subscriptions, peerPid, subscription) do
    peerSubscriptions = :maps.get(peerPid, subscriptions, []) ++ [subscription]
    :maps.put(peerPid, peerSubscriptions, subscriptions)
  end

  @spec delete(subscriptions(), pid(), binary()) :: subscriptions()

  def delete(subscriptions, peerPid, subscription) do
    peerSubscriptions1 = :maps.get(peerPid, subscriptions, [])
    peerSubscriptions2 = :lists.delete(subscription, peerSubscriptions1)

    case(peerSubscriptions2) do
      [] ->
        :maps.remove(peerPid, subscriptions)

      _ ->
        :maps.put(peerPid, peerSubscriptions2, subscriptions)
    end
  end

  @spec delete(subscriptions(), pid()) :: subscriptions()

  def delete(subscriptions, peerPid) do
    :maps.remove(peerPid, subscriptions)
  end

  @spec match(subscriptions(), binary()) :: list(pid())

  def match(subscriptions, firstPart) do
    peerPids = :maps.keys(subscriptions)
    :lists.filter(fn peerPid -> peer_match(subscriptions, peerPid, firstPart) end, peerPids)
  end

  defp peer_match(subscriptions, peerPid, firstPart) do
    peerSubscriptions = :maps.get(peerPid, subscriptions, [])

    :lists.any(
      fn
        <<>> ->
          true

        peerSubscription ->
          case(:binary.match(firstPart, peerSubscription)) do
            {0, _} ->
              true

            _ ->
              false
          end
      end,
      peerSubscriptions
    )
  end
end
