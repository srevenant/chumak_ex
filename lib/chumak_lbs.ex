# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-05-02 12:33:54

defmodule :chumak_lbs do
  require Record

  @erlrecordfields_lbs [:map, :xref]
  Record.defrecordp(:erlrecord_lbs, :lbs, map: :undefined, xref: :undefined)

  @typep lbs() :: record(:erlrecord_lbs, map: :undefined | map(), xref: term())

  @typep lbs_iterator() :: :maps.ierator()

  @spec new() :: lbs()

  def new() do
    erlrecord_lbs(map: %{}, xref: %{})
  end

  @spec put(lbs(), term(), term()) :: lbs()

  def put(erlrecord_lbs(map: lBMap, xref: xRef) = lBs, identifier, item) do
    lB = get_sub_lb(lBMap, identifier)
    newLB = :chumak_lb.put(lB, item)
    newLBMap = Map.merge(lBMap, %{identifier => newLB})
    newXRef = Map.merge(xRef, %{item => identifier})
    erlrecord_lbs(lBs, map: newLBMap, xref: newXRef)
  end

  @spec get(lbs(), term()) :: :none | {lbs(), term()}

  def get(erlrecord_lbs(map: lBMap) = lBs, identifier) do
    lB = get_sub_lb(lBMap, identifier)

    case(:chumak_lb.get(lB)) do
      {newLB, item} ->
        newLBMap = Map.merge(lBMap, %{identifier => newLB})
        newLBs = erlrecord_lbs(lBs, map: newLBMap)
        {newLBs, item}

      :none ->
        :none
    end
  end

  @spec delete(lbs(), term()) :: lbs()

  def delete(erlrecord_lbs(xref: lBXRef) = lBs, item) do
    case(:maps.find(item, lBXRef)) do
      {:ok, identifier} ->
        delete_by_identifier(lBs, identifier, item)

      :error ->
        lBs
    end
  end

  @spec iterator(lbs()) :: lbs_iterator()

  def iterator(erlrecord_lbs(map: map)) do
    :maps.iterator(map)
  end

  @spec next(lbs_iterator()) :: {term(), term(), lbs_iterator()} | :none

  def next(iter) do
    :maps.next(iter)
  end

  defp delete_by_identifier(erlrecord_lbs(map: lBMap, xref: lBXRef) = lBs, identifier, item) do
    lB = get_sub_lb(lBMap, identifier)
    newLB = :chumak_lb.delete(lB, item)

    newLBMap =
      case(:chumak_lb.is_empty(newLB)) do
        true ->
          :maps.remove(identifier, lBMap)

        false ->
          Map.merge(lBMap, %{identifier => newLB})
      end

    newXRef = :maps.remove(item, lBXRef)
    erlrecord_lbs(lBs, map: newLBMap, xref: newXRef)
  end

  defp get_sub_lb(lbsMap, identity) do
    case(:maps.find(identity, lbsMap)) do
      {:ok, x} ->
        x

      :error ->
        :chumak_lb.new()
    end
  end
end
