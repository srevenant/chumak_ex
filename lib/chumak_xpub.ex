# Generated by erl2ex (http://github.com/dazuma/erl2ex)
# From Erlang source: (Unknown source file)
# At: 2022-05-02 12:34:00

defmodule :chumak_xpub do
  @behaviour :chumak_pattern

  defmacrop erlconst_PUB() do
    quote do
      :chumak_pub
    end
  end

  def init(var_identity) do
    erlconst_PUB().init(var_identity, [:xpub])
  end

  def terminate(reason, state) do
    erlconst_PUB().terminate(reason, state)
  end

  def identity(state) do
    erlconst_PUB().identity(state)
  end

  def valid_peer_type(socketType) do
    erlconst_PUB().valid_peer_type(socketType)
  end

  def peer_flags(state) do
    erlconst_PUB().peer_flags(state)
  end

  def accept_peer(state, peerPid) do
    erlconst_PUB().accept_peer(state, peerPid)
  end

  def peer_ready(state, peerPid, var_identity) do
    erlconst_PUB().peer_ready(state, peerPid, var_identity)
  end

  def send(state, data, from) do
    erlconst_PUB().send(state, data, from)
  end

  def recv(state, from) do
    erlconst_PUB().recv(state, from)
  end

  def send_multipart(state, data, from) do
    erlconst_PUB().send_multipart(state, data, from)
  end

  def recv_multipart(state, from) do
    erlconst_PUB().recv_multipart(state, from)
  end

  def unblock(state, from) do
    erlconst_PUB().unblock(state, from)
  end

  def peer_recv_message(state, message, from) do
    erlconst_PUB().peer_recv_message(state, message, from)
  end

  def queue_ready(state, var_identity, from) do
    erlconst_PUB().queue_ready(state, var_identity, from)
  end

  def peer_disconected(state, peerPid) do
    erlconst_PUB().peer_disconected(state, peerPid)
  end

  def peer_subscribe(state, peerPid, subscription) do
    erlconst_PUB().peer_subscribe(state, peerPid, subscription)
  end

  def peer_cancel_subscribe(state, peerPid, subscription) do
    erlconst_PUB().peer_cancel_subscribe(state, peerPid, subscription)
  end
end
